/*
Flexbox, short for "Flexible Box Layout," is a CSS layout module designed to create more efficient and predictable layouts for complex web applications. 
Flexbox makes it easy to align and distribute space among items in a container, even when their size is unknown or dynamic.

Basic Concepts
Flex Container: The parent element with display: flex; or display: inline-flex;
It defines a flex context for its direct children (flex items).

Flex Items: The direct children of a flex container. These items can be controlled using various flex properties.
*/

/*  Container Properties */

/* Defines a block-level flex container */
.container {
    display: flex; /* Creates a flexible container where child elements follow flexbox rules. */
}

/* Defines an inline-level flex container */
.container-inline {
    display: inline-flex; /* Makes an element behave like an inline element while its children are laid out using flexbox rules. */
}

/* Takes up the full width of its parent, creating a block of content */
div {
    display: block; /* Element starts on a new line and stretches to the container width. */
}

/* The element flows with the text and takes only as much width as it needs */
span {
    display: inline; /* Element remains inline with surrounding content. */
}

/* Flex Container Settings */

/* flex-direction */
.container {
    flex-direction: row; /* Lays out items in a horizontal row */
    flex-direction: row-reverse; /* Lays out items in a horizontal row but in reverse order */
    flex-direction: column; /* Lays out items in a vertical column */
    flex-direction: column-reverse; /* Lays out items in a vertical column but in reverse order */
}

/* flex-wrap */
.container {
    flex-wrap: nowrap; /* All flex items will be on a single line */
    flex-wrap: wrap; /* Flex items will wrap onto multiple lines */
    flex-wrap: wrap-reverse; /* Flex items will wrap onto multiple lines in reverse order */
}

/* justify-content */
.container {
    justify-content: flex-start; /* Items are packed toward the start of the flex container */
    justify-content: flex-end; /* Items are packed toward the end of the flex container */
    justify-content: center; /* Items are centered along the main axis */
    justify-content: space-between; /* Items are evenly distributed with the first item at the start and the last item at the end */
    justify-content: space-around; /* Items are evenly distributed with equal space around them */
    justify-content: space-evenly; /* Items are distributed so that the spacing between any two items (and the space to the edges) is equal */
}

/* align-items */
.container {
    align-items: stretch; /* Items stretch to fill the container */
    align-items: flex-start; /* Items are aligned toward the start of the cross axis */
    align-items: flex-end; /* Items are aligned toward the end of the cross axis */
    align-items: center; /* Items are centered along the cross axis */
    align-items: baseline; /* Items are aligned along their baseline */
}

/* align-content (for multi-line containers) */
.container {
    align-content: stretch; /* Lines stretch to fill the container */
    align-content: flex-start; /* Lines are packed toward the start of the flex container */
    align-content: flex-end; /* Lines are packed toward the end of the flex container */
    align-content: center; /* Lines are centered in the flex container */
    align-content: space-between; /* Lines are evenly distributed with the first line at the start and the last line at the end */
    align-content: space-around; /* Lines are evenly distributed with equal space around them */
}

/***********************
** Flex Item Properties **
***********************/

/* Controls the order of items */
.item {
    order: 2; /* Defines the order in which the item is displayed */
}

/* flex-grow */
.item {
    flex-grow: 0; /* Item will not grow relative to the rest of the flex items */
}

/* flex-shrink */
.item {
    flex-shrink: 1; /* Item will shrink to prevent overflow */
}

/* flex-basis */
.item {
    flex-basis: auto; /* The initial main size of the flex item */
}

/* align-self allows individual flex items to overwide the container's align-items property.
This means a specific value can have it's own alignment.
*/

/* align-self */
.item {
    align-self: auto; /* Inherits from the align-items value of the parent container */
    align-self: flex-start; /* Aligns the item to the start of the cross axis */
    align-self: flex-end; /* Aligns the item to the end of the cross axis */
    align-self: center; /* Aligns the item along the center of the cross axis */
    align-self: baseline; /* Aligns the item along the baseline */
    align-self: stretch; /* Stretches the item to fill the container */
}
